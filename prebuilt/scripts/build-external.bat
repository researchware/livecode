@ECHO ON
SETLOCAL ENABLEEXTENSIONS ENABLEDELAYEDEXPANSION

REM ############################################################################
REM #
REM #   BUILD External
REM #

SET EXTERNAL_NAME=%1
SET EXTERNAL_CLONE_URL=%2

for /f "delims=" %%v in ('echo "%%!EXTERNAL_NAME!_VERSION%%"') do set "EXTERNAL_HASH=%%~v"
for /f "delims=" %%v in ('echo "%%!EXTERNAL_NAME!_BUILDREVISION%%"') do set "EXTERNAL_BUILDREVISION=%%~v"

ECHO Build %EXTERNAL_NAME%-%EXTERNAL_HASH%.%EXTERNAL_BUILDREVISION% for %BUILDTRIPLE%

SET CLONE_DIR="%EXTERNAL_NAME%_%EXTERNAL_HASH%_%EXTERNAL_BUILDREVISION%"
SET EXTERNAL_BIN=%_ROOT_DIR%\%EXTERNAL_NAME%-%EXTERNAL_HASH%.%EXTERNAL_BUILDREVISION%-%BUILDTRIPLE%-bin
SET EXTERNAL_BUILD_LOG=%_ROOT_DIR%\%EXTERNAL_NAME%-%EXTERNAL_HASH%.%EXTERNAL_BUILDREVISION%-%BUILDTRIPLE%.log
SET EXTERNAL_TAR=%_PACKAGE_DIR%\%EXTERNAL_NAME%-%EXTERNAL_HASH%-%BUILDTRIPLE%-%EXTERNAL_BUILDREVISION%.tar

cd "%_ROOT_DIR%"

if not exist %CLONE_DIR% (
	ECHO Cloning %EXTERNAL_CLONE_URL%
	cmd /c git clone %EXTERNAL_CLONE_URL% %CLONE_DIR% >>%EXTERNAL_BUILD_LOG% 2>>&1
	IF %ERRORLEVEL% NEQ 0 EXIT /B %ERRORLEVEL%
)

ECHO Resetting to %EXTERNAL_HASH%
cd "%CLONE_DIR%"
cmd /c git reset --hard %EXTERNAL_HASH% >>%EXTERNAL_BUILD_LOG% 2>>&1

ECHO Updating submodules
cmd /c git submodule sync --recursive
cmd /c git submodule update --init --recursive >>%EXTERNAL_BUILD_LOG% 2>>&1

ECHO Building submodules
IF %ARCH%==x86_64 (
	SET PLATFORMNAME=x64
	SET FILENAME=%EXTERNAL_NAME%-x64.dll
	cmd /c msbuild "%EXTERNAL_NAME%\%EXTERNAL_NAME%.sln" /fl /flp:Verbosity=normal /nologo /m:1 /p:Configuration=Release /p:Platform=x64 >>%EXTERNAL_BUILD_LOG% 2>>&1
) ELSE (
	SET PLATFORMNAME=Win32
	SET FILENAME=%EXTERNAL_NAME%-x86.dll
	cmd /c msbuild "%EXTERNAL_NAME%\%EXTERNAL_NAME%.sln" /fl /flp:Verbosity=normal /nologo /m:1 /p:Configuration=Release /p:Platform=Win32 >>%EXTERNAL_BUILD_LOG% 2>>&1
)

if not exist "%_ROOT_DIR%\%CLONE_DIR%\%EXTERNAL_NAME%\_build\Release\%PLATFORMNAME%\%FILENAME%" (
	ECHO Could not find %_ROOT_DIR%\%CLONE_DIR%\%EXTERNAL_NAME%\_build\Release\%PLATFORMNAME%\%FILENAME%
	EXIT /B 1
)

ECHO Packaging %EXTERNAL_NAME%-%EXTERNAL_HASH%.%EXTERNAL_BUILDREVISION% for %BUILDTRIPLE%

IF NOT EXIST "%EXTERNAL_BIN%\lib" (
	ECHO Creating %EXTERNAL_BIN%\lib
	MKDIR "%EXTERNAL_BIN%\lib"
)

COPY /Y "%_ROOT_DIR%\%CLONE_DIR%\%EXTERNAL_NAME%\_build\Release\%PLATFORMNAME%\%FILENAME%"     "%EXTERNAL_BIN%\lib\%FILENAME%" >>%EXTERNAL_BUILD_LOG% 2>>&1
IF %ERRORLEVEL% NEQ 0 EXIT /B %ERRORLEVEL%

ECHO Build the prebuilt %EXTERNAL_NAME%-%EXTERNAL_HASH%.%EXTERNAL_BUILDREVISION% archives for %BUILDTRIPLE%

cd "%EXTERNAL_BIN%"
FOR /F "usebackq tokens=*" %%x IN (`cygpath.exe -u %EXTERNAL_TAR%`) DO SET EXTERNAL_TAR_CYG=%%x

ECHO Archiving %EXTERNAL_NAME%-%EXTERNAL_HASH%.%EXTERNAL_BUILDREVISION% for %BUILDTRIPLE%
ECHO ========== ARCHIVING ==========  >>%EXTERNAL_BUILD_LOG%
bash -c "tar --create --file=%EXTERNAL_TAR_CYG% --transform='flags=r;s|^|%BUILDTRIPLE%/|' lib" >>%EXTERNAL_BUILD_LOG% 2>>&1
IF %ERRORLEVEL% NEQ 0 EXIT /B %ERRORLEVEL%

ECHO Compressing %EXTERNAL_NAME%-%EXTERNAL_HASH%.%EXTERNAL_BUILDREVISION% for %BUILDTRIPLE%
ECHO ========== COMPRESSING ==========  >>%EXTERNAL_BUILD_LOG%
bash -c "bzip2 --force %EXTERNAL_TAR_CYG%" >>%EXTERNAL_BUILD_LOG% 2>>&1
IF %ERRORLEVEL% NEQ 0 EXIT /B %ERRORLEVEL%
